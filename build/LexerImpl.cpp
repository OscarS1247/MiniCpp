/* Generated by re2c 3.0 on Tue Aug 13 00:19:31 2024 */
#line 1 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
#include <cstring>
#include "Lexer.hpp"

#line 7 "LexerImpl.cpp"
#define YYMAXFILL 9
#line 4 "/home/oscar/Compiladores3/MiniC++/Lexer.re"


Lexer::DataBuffer::DataBuffer(std::ifstream &in)
    : in(in),
      buf(new char[SIZE + YYMAXFILL]), 
      lim(buf + SIZE),
      cur(lim),
      tok(lim),
      eof(false)
{
}

bool Lexer::DataBuffer::fill(size_t need)
{
    if (eof)
        return false;

    const size_t free = tok - buf;
    if (free < need)
        return false;

    memmove(buf, tok, lim - tok);
    lim -= free;
    cur -= free;
    tok -= free;

    in.read(lim, free);
    lim += in.gcount();

    if (lim < buf + SIZE)
    {
        eof = true;
        memset(lim, 0, YYMAXFILL);
        lim += YYMAXFILL;
    }
    return true;
}

Token Lexer::nextToken()
{
    while (true) {
        db.tok = db.cur;
        
#line 53 "LexerImpl.cpp"
{
	char yych;
	if ((db.lim - db.cur) < 9) if (!db.fill(9)) return Token::Error;
	yych = *db.cur;
	switch (yych) {
		case 0x00: goto yy1;
		case '\t':
		case '\n':
		case ' ': goto yy4;
		case '!': goto yy6;
		case '"': goto yy7;
		case '%': goto yy8;
		case '&': goto yy9;
		case '(': goto yy11;
		case ')': goto yy12;
		case '*': goto yy13;
		case '+': goto yy14;
		case ',': goto yy15;
		case '-': goto yy16;
		case '/': goto yy17;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy19;
		case ';': goto yy21;
		case '<': goto yy22;
		case '=': goto yy24;
		case '>': goto yy26;
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'F':
		case 'G':
		case 'H':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'T':
		case 'U':
		case 'V':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'f':
		case 'g':
		case 'h':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 't':
		case 'u':
		case 'v':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		case 'E':
		case 'e': goto yy31;
		case 'I':
		case 'i': goto yy32;
		case 'S':
		case 's': goto yy33;
		case 'W':
		case 'w': goto yy34;
		case '[': goto yy35;
		case ']': goto yy36;
		case '{': goto yy37;
		case '|': goto yy38;
		case '}': goto yy39;
		default: goto yy2;
	}
yy1:
	++db.cur;
#line 63 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ return (YYMAXFILL == db.lim - db.tok)? Token::Eof : Token::Error;}
#line 152 "LexerImpl.cpp"
yy2:
	++db.cur;
yy3:
#line 62 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ return Token::Other; }
#line 158 "LexerImpl.cpp"
yy4:
	++db.cur;
	if (db.lim <= db.cur) if (!db.fill(1)) return Token::Error;
	yych = *db.cur;
	switch (yych) {
		case '\t':
		case '\n':
		case ' ': goto yy4;
		default: goto yy5;
	}
yy5:
#line 65 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{continue;}
#line 172 "LexerImpl.cpp"
yy6:
	yych = *++db.cur;
	switch (yych) {
		case '=': goto yy40;
		default: goto yy3;
	}
yy7:
	++db.cur;
	if (db.lim <= db.cur) if (!db.fill(1)) return Token::Error;
	yych = *db.cur;
	switch (yych) {
		case '"': goto yy41;
		default: goto yy7;
	}
yy8:
	++db.cur;
#line 82 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::OP_MOD; }
#line 191 "LexerImpl.cpp"
yy9:
	yych = *++db.cur;
	switch (yych) {
		case '&': goto yy42;
		default: goto yy10;
	}
yy10:
#line 108 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::AMPERSAND; }
#line 201 "LexerImpl.cpp"
yy11:
	++db.cur;
#line 98 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::OPEN_PAR; }
#line 206 "LexerImpl.cpp"
yy12:
	++db.cur;
#line 99 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::CLOSE_PAR; }
#line 211 "LexerImpl.cpp"
yy13:
	++db.cur;
#line 80 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::OP_MULT; }
#line 216 "LexerImpl.cpp"
yy14:
	++db.cur;
#line 78 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::OP_ADD; }
#line 221 "LexerImpl.cpp"
yy15:
	++db.cur;
#line 104 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::COMMA; }
#line 226 "LexerImpl.cpp"
yy16:
	++db.cur;
#line 79 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::OP_SUB; }
#line 231 "LexerImpl.cpp"
yy17:
	yych = *++db.cur;
	switch (yych) {
		case '*': goto yy43;
		case '/': goto yy44;
		default: goto yy18;
	}
yy18:
#line 81 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::OP_DIV; }
#line 242 "LexerImpl.cpp"
yy19:
	++db.cur;
	if (db.lim <= db.cur) if (!db.fill(1)) return Token::Error;
	yych = *db.cur;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy19;
		default: goto yy20;
	}
yy20:
#line 106 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::NUMBER; }
#line 263 "LexerImpl.cpp"
yy21:
	++db.cur;
#line 107 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::SEMICOLON; }
#line 268 "LexerImpl.cpp"
yy22:
	yych = *++db.cur;
	switch (yych) {
		case '<': goto yy46;
		case '=': goto yy47;
		default: goto yy23;
	}
yy23:
#line 84 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::LT; }
#line 279 "LexerImpl.cpp"
yy24:
	yych = *++db.cur;
	switch (yych) {
		case '=': goto yy48;
		default: goto yy25;
	}
yy25:
#line 77 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::OP_ASSIGN; }
#line 289 "LexerImpl.cpp"
yy26:
	yych = *++db.cur;
	switch (yych) {
		case '=': goto yy49;
		case '>': goto yy50;
		default: goto yy27;
	}
yy27:
#line 83 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::GT; }
#line 300 "LexerImpl.cpp"
yy28:
	++db.cur;
	if (db.lim <= db.cur) if (!db.fill(1)) return Token::Error;
	yych = *db.cur;
yy29:
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy30;
	}
yy30:
#line 94 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::IDENT; }
#line 375 "LexerImpl.cpp"
yy31:
	yych = *++db.cur;
	switch (yych) {
		case 'L':
		case 'l': goto yy51;
		default: goto yy29;
	}
yy32:
	yych = *++db.cur;
	switch (yych) {
		case 'F':
		case 'f': goto yy52;
		case 'N':
		case 'n': goto yy54;
		default: goto yy29;
	}
yy33:
	yych = *++db.cur;
	switch (yych) {
		case 'T':
		case 't': goto yy55;
		default: goto yy29;
	}
yy34:
	yych = *++db.cur;
	switch (yych) {
		case 'H':
		case 'h': goto yy56;
		default: goto yy29;
	}
yy35:
	++db.cur;
#line 102 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::OPEN_BRACKET; }
#line 410 "LexerImpl.cpp"
yy36:
	++db.cur;
#line 103 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::CLOSE_BRACKET; }
#line 415 "LexerImpl.cpp"
yy37:
	++db.cur;
#line 100 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::OPEN_CURLY; }
#line 420 "LexerImpl.cpp"
yy38:
	yych = *++db.cur;
	switch (yych) {
		case '|': goto yy57;
		default: goto yy3;
	}
yy39:
	++db.cur;
#line 101 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::CLOSE_CURLY; }
#line 431 "LexerImpl.cpp"
yy40:
	++db.cur;
#line 87 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::NE; }
#line 436 "LexerImpl.cpp"
yy41:
	++db.cur;
#line 96 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::STRING_LITERAL; }
#line 441 "LexerImpl.cpp"
yy42:
	++db.cur;
#line 90 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::BOOL_AND; }
#line 446 "LexerImpl.cpp"
yy43:
	++db.cur;
	if (db.lim <= db.cur) if (!db.fill(1)) return Token::Error;
	yych = *db.cur;
	switch (yych) {
		case '*': goto yy58;
		default: goto yy43;
	}
yy44:
	++db.cur;
	if (db.lim <= db.cur) if (!db.fill(1)) return Token::Error;
	yych = *db.cur;
	switch (yych) {
		case '\n': goto yy45;
		default: goto yy44;
	}
yy45:
#line 66 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ continue; }
#line 466 "LexerImpl.cpp"
yy46:
	++db.cur;
#line 91 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::LT_LT; }
#line 471 "LexerImpl.cpp"
yy47:
	++db.cur;
#line 86 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::LTE; }
#line 476 "LexerImpl.cpp"
yy48:
	++db.cur;
#line 88 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::EQ; }
#line 481 "LexerImpl.cpp"
yy49:
	++db.cur;
#line 85 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::GTE; }
#line 486 "LexerImpl.cpp"
yy50:
	++db.cur;
#line 92 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::GT_GT; }
#line 491 "LexerImpl.cpp"
yy51:
	yych = *++db.cur;
	switch (yych) {
		case 'S':
		case 's': goto yy59;
		default: goto yy29;
	}
yy52:
	yych = *++db.cur;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy53;
	}
yy53:
#line 70 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::KW_IF; }
#line 570 "LexerImpl.cpp"
yy54:
	yych = *++db.cur;
	switch (yych) {
		case 'T':
		case 't': goto yy60;
		default: goto yy29;
	}
yy55:
	yych = *++db.cur;
	switch (yych) {
		case 'D':
		case 'd': goto yy62;
		default: goto yy29;
	}
yy56:
	yych = *++db.cur;
	switch (yych) {
		case 'I':
		case 'i': goto yy63;
		default: goto yy29;
	}
yy57:
	++db.cur;
#line 89 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::BOOL_OR; }
#line 596 "LexerImpl.cpp"
yy58:
	++db.cur;
	if (db.lim <= db.cur) if (!db.fill(1)) return Token::Error;
	yych = *db.cur;
	switch (yych) {
		case '/': goto yy64;
		default: goto yy43;
	}
yy59:
	yych = *++db.cur;
	switch (yych) {
		case 'E':
		case 'e': goto yy65;
		default: goto yy29;
	}
yy60:
	yych = *++db.cur;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy61;
	}
yy61:
#line 69 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::KW_INT; }
#line 683 "LexerImpl.cpp"
yy62:
	yych = *(db.mark = ++db.cur);
	switch (yych) {
		case ':': goto yy67;
		default: goto yy29;
	}
yy63:
	yych = *++db.cur;
	switch (yych) {
		case 'L':
		case 'l': goto yy69;
		default: goto yy29;
	}
yy64:
	++db.cur;
#line 67 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ continue; }
#line 701 "LexerImpl.cpp"
yy65:
	yych = *++db.cur;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy66;
	}
yy66:
#line 71 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::KW_ELSE; }
#line 773 "LexerImpl.cpp"
yy67:
	yych = *++db.cur;
	switch (yych) {
		case ':': goto yy70;
		default: goto yy68;
	}
yy68:
	db.cur = db.mark;
	goto yy30;
yy69:
	yych = *++db.cur;
	switch (yych) {
		case 'E':
		case 'e': goto yy71;
		default: goto yy29;
	}
yy70:
	yych = *++db.cur;
	switch (yych) {
		case 'C':
		case 'c': goto yy73;
		case 'E':
		case 'e': goto yy74;
		default: goto yy68;
	}
yy71:
	yych = *++db.cur;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy72;
	}
yy72:
#line 72 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::KW_WHILE; }
#line 870 "LexerImpl.cpp"
yy73:
	yych = *++db.cur;
	switch (yych) {
		case 'I':
		case 'i': goto yy75;
		case 'O':
		case 'o': goto yy76;
		default: goto yy68;
	}
yy74:
	yych = *++db.cur;
	switch (yych) {
		case 'N':
		case 'n': goto yy77;
		default: goto yy68;
	}
yy75:
	yych = *++db.cur;
	switch (yych) {
		case 'N':
		case 'n': goto yy78;
		default: goto yy68;
	}
yy76:
	yych = *++db.cur;
	switch (yych) {
		case 'U':
		case 'u': goto yy79;
		default: goto yy68;
	}
yy77:
	yych = *++db.cur;
	switch (yych) {
		case 'D':
		case 'd': goto yy80;
		default: goto yy68;
	}
yy78:
	++db.cur;
#line 74 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::KW_CIN; }
#line 912 "LexerImpl.cpp"
yy79:
	yych = *++db.cur;
	switch (yych) {
		case 'T':
		case 't': goto yy81;
		default: goto yy68;
	}
yy80:
	yych = *++db.cur;
	switch (yych) {
		case 'L':
		case 'l': goto yy82;
		default: goto yy68;
	}
yy81:
	++db.cur;
#line 73 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::KW_COUT; }
#line 931 "LexerImpl.cpp"
yy82:
	++db.cur;
#line 75 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
	{ text = db.tokenText(); return Token::KW_ENDL; }
#line 936 "LexerImpl.cpp"
}
#line 109 "/home/oscar/Compiladores3/MiniC++/Lexer.re"
     
    }
}